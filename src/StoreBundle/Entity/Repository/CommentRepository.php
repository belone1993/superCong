<?php

namespace StoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    const COMMENT_LIMIT = 15;

    /**
     * 获取留言信息 顺序
     *
     * @param string $orderBy
     * @return array
     */
    public function findGuestBookOrderBy( $orderBy = 'DESC' )
    {
        return $this->_em->createQueryBuilder()
            ->select("c")
            ->from('StoreBundle:Comment', 'c')
            ->where("c.threadKey = 'guestBook'")
//            ->setParameter('threadKey', 'guestBook')
            ->orderBy('c.id', $orderBy)
//            ->setMaxResults( self::COMMENT_LIMIT )
//            ->setFirstResult( ($page - 1) * $limit )
            ->getQuery();
    }

    /**
     * 统计留言数量
     *
     * @return mixed
     */
    public function countComments()
    {
        return $this->_em->createQueryBuilder()
            ->select("COUNT(c.id)")
            ->from('StoreBundle:Comment', 'c')
            ->getQuery()->getSingleScalarResult();
    }

    /**
     * 获取留言信息
     *
     * @param int $page
     * @param int $limit
     * @return array
     */
    public function findCommentByGuestBook( $page = 1, $limit = 1 )
    {
        return $this->_em->createQueryBuilder()
            ->select("c")
            ->from('StoreBundle:Comment', 'c')
            ->where("c.threadKey = :threadKey")
            ->setParameter('threadKey', 'guestBook')
            ->orderBy('c.id', 'DESC')
            ->setMaxResults( self::COMMENT_LIMIT )
            ->setFirstResult( ($page - 1) * $limit )
            ->getQuery()->getResult();
    }

    /**
     * 获取最新一条评论记录
     *
     * @return array
     */
    public function findCommentByLast()
    {
        $result = $this->_em->createQueryBuilder()
            ->select("c")
            ->from('StoreBundle:Comment', 'c')
            ->orderBy('c.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()->getResult();
        if( $result )
        {
            return $result[0];
        }
        return $result;
    }
}
